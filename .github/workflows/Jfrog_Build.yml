# This is a basic workflow to help you get started with Actions

name: Jfrog_Build
# Bruh
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build:
        type: choice
        description: Number of build
        options:
        - Last
        - PreLast
        - PrePreLast
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
  
    env:
      JF_URL: http://10.202.15.58:8082
      JF_ACCESS_TOKEN: ${{secrets.JFROG_PASSWORD}}
      
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # - name: Get branch name
      #   id: branch-name
      #   uses: tj-actions/branch-names@v7
        
      # - run: '[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12'
      #   id: tls
      # - name: Install jq
      #   if: steps.tls.outcome == 'success'
      #   uses: dcarbone/install-jq-action@v2.0.2
        
      #Setting up jfrog and adding server
      - name: Setup Jfrog
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_ACCESS_TOKEN: ${{secrets.JFROG_PASSWORD}}
      - run: |
          jf c add --url=http://10.202.15.58:8082 --user="github" --password="${{secrets.JFROG_PASSWORD}}" --interactive=false --insecure-tls=true
      - name: Check and set build env
        env:
          Build_input: $${{inputs.build}}
        run: |
          local BUILD=''
          if ($Build_input == 'Last'){
            BUILD = ((jf rt s "generic-local/jfrog_test/Build" | ConvertFrom-Json).path.TrimEnd(".txt") -replace '[a-zA-Z-/_]'| Sort-Object -Descending)[0]
          } else if ($Build_input == 'PreLast'){
            BUILD = ((jf rt s "generic-local/jfrog_test/Build" | ConvertFrom-Json).path.TrimEnd(".txt") -replace '[a-zA-Z-/_]'| Sort-Object -Descending)[1]
          } else if ($Build_input == PrePreLast){
            BUILD = ((jf rt s "generic-local/jfrog_test/Build" | ConvertFrom-Json).path.TrimEnd(".txt") -replace '[a-zA-Z-/_]'| Sort-Object -Descending)[2]
          }
          echo "BUILD=$BUILD" >> $GITHUB_ENV
      - name: Push build to Artifactory
   
        run: |
          jf rt u "index.html" generic-local/jfrog_test/Build/Build-${{env.BUILD}}.txt
          
          jf rt build-publish latest 1
